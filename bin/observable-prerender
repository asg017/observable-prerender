#!/usr/bin/env node
const { program } = require("commander");
const { load } = require("../src");
const {
  applyBrowserOptions,
  applyRedefineOptions,
  getNotebookConfig,
  runRedefines,
  consolidateFormat,
} = require("./utils.js");
const { join } = require("path");
const { writeFileSync } = require("rw").dash;

const formatOptions = new Set([
  "png",
  "svg",
  "jpeg",
  "html",
  "svg",
  "text",
  "txt",
  "json",
]);

let p = program
  .version(require("../package.json").version)
  .arguments("<notebook> [cells...]")
  .description("Pre-render an Observable notebook.")
  .option(
    "-f, --format [format]",
    `Type of output: One of ${Array.from(formatOptions).join(", ")}.`,
    null
  )
  .option(
    "-o, --out [file]",
    "Output file path. Can only be used when one cell name is passed into 'cells'."
  )
  .option(
    "--waitfor [cells...]",
    "Extra cells to include in the document, but not save as a file (e.g. style cells, animation loops, etc.)."
  )
  .option(
    "--out-dir <directory>",
    "Specify a directory to save all the frames to."
  )
  .option(
    "--token <token>",
    "An observablehq.com API token to access the notebook."
  )
  .option("-v, --verbose", "Print logs to follow progress.");

p = applyBrowserOptions(p);
p = applyRedefineOptions(p);

p.action(function (argNotebook, argCells) {
  const opts = program.opts();
  const { out, outDir, verbose, waitfor = [] } = opts;
  let { format } = opts;

  const notebookConfig = getNotebookConfig(opts);

  if (out && argCells.length > 1) {
    console.error(
      `Only 1 cell could be passed into 'cells' when '--out' is specified. ${argCells.length} were passed in.`
    );
    process.exit(1);
  }

  if (out && outDir) {
    console.error(`Only 1 of --out and --out-dir can be specified.`);
    process.exit(1);
  }

  format = consolidateFormat(out, format, formatOptions, "svg");
  const cells = [...argCells, ...waitfor];
  if (verbose)
    console.log(`Loading notebook "${argNotebook}" with cells `, cells);

  load(argNotebook, cells, notebookConfig).then(async (notebook) => {
    await runRedefines(notebook, opts, verbose);
    await Promise.all(waitfor.map((cell) => notebook.waitFor(cell)));
    await Promise.all(
      argCells.map(async (cell) => {
        const path = out
          ? out
          : join(outDir || process.cwd(), `${cell}.${format}`);

        if (verbose)
          console.log(`Saving cell ${cell} as a ${format} file to ${path}`);

        if (format === "svg") return notebook.svg(cell, path);
        if (format === "html") return notebook.html(cell, path);
        if (format === "text" || format === "txt")
          return writeFileSync(path, await notebook.value(cell));
        if (format === "json")
          return writeFileSync(
            path,
            JSON.stringify(await notebook.value(cell))
          );
        return notebook.screenshot(cell, path, { type: format });
      })
    ).catch(async (error) => {
      console.error(`Error encountered when rendering cells`);
      console.error(error);
      notebook.close();
      process.exit(1);
    });
    notebook.close();
    process.exit(0);
  });
});

program.parse(process.argv);
