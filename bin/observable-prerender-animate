#!/usr/bin/env node
const { program } = require("commander");
const { load } = require("../src");
const {
  applyBrowserOptions,
  applyRedefineOptions,
  getNotebookConfig,
  runRedefines,
} = require("./utils.js");
const { join } = require("path");

function parseArgIter(iter) {
  const sep = iter.indexOf(":");
  if (sep < 0) {
    console.error(
      `SyntaxError: --iter format must be in "abc:xyz" format, no ":" found.`
    );
    process.exit(1);
  }
  return {
    counter: iter.substring(0, sep),
    iterable: iter.substring(sep + 1),
  };
}

let p = program
  .version(require("../package.json").version)
  .arguments("<notebook> [cells...]")
  .description("Pre-render an Observable notebook.")
  .requiredOption(
    "--iter <cell:cellIterator>",
    "The cell you want to iterate on, followed by the cell that contains the values that will be iterated through."
  )
  .option(
    "--iter-waitfor <cells...>",
    'What cell to "wait for" to be fulfilled when iterating through the iterator.'
  )
  .option(
    "--iter-index",
    "Whether to use the actual values of the iteratorCell or the indicies."
  )
  .option("-f, --format <format>", "Type of output, png, jpeg, or svg", "png")
  .option(
    "--out-dir <directory>",
    "Specify a directory to save all the frames to.",
    process.cwd()
  )
  .option("-v, --verbose", "Print logs to follow progress.");

p = applyBrowserOptions(p);
p = applyRedefineOptions(p);

p.action(function (argNotebook, argCells) {
  const opts = program.opts();
  const { iter, iterWaitfor = [], outDir, verbose } = opts;
  let { format } = opts;

  const iterIndex = Boolean(opts.iterIndex);
  const argIter = parseArgIter(iter);

  const embedCells = [...argCells, ...iterWaitfor];

  const notebookConfig = getNotebookConfig(opts);

  if (verbose)
    console.log(`Loading notebook "${argNotebook}" with cells `, argCells);

  load(argNotebook, embedCells, notebookConfig).then(async (notebook) => {
    await runRedefines(notebook, opts, verbose);

    // iterate through the cell
    const iterableValues = await notebook.value(argIter.iterable);

    const zeroPad = Array.from({
      length: Math.ceil(Math.log(iterableValues.length) / Math.log(10)),
    })
      .map(() => "0")
      .join("");

    for await (const [i, iterableValue] of iterableValues.entries()) {
      if (verbose)
        console.log(`[${i + 1}/${iterableValues.length}] Redefining`);

      if (iterIndex) await notebook.redefine(argIter.counter, i);
      else await notebook.redefine(argIter.counter, iterableValue);

      if (verbose)
        console.log(
          `[${i + 1}/${iterableValues.length}] Waiting for`,
          iterWaitfor
        );
      await Promise.all(iterWaitfor.map((cell) => notebook.waitFor(cell)));

      await Promise.all(
        argCells.map((cell) => {
          if (verbose)
            console.log(
              `[${i + 1}/${iterableValues.length}] Screenshotting`,
              cell
            );
          const path = join(
            outDir,
            `${(zeroPad + i).slice(-zeroPad.length)}_${cell}.${format}`
          );
          if (format === "svg") return notebook.svg(cell, path);
          return notebook.screenshot(cell, path, { type: format });
        })
      );
    }

    notebook.close();
  });
});

program.parse(process.argv);
