#!/usr/bin/env node
const { program } = require("commander");
const { load, DEFAULT_WIDTH, DEFAULT_HEIGHT } = require("../src");
const {
  parseArgRedefines,
  parseArgRedefineFiles,
  valueOfFile,
} = require("./utils.js");
const { join } = require("path");

function parseArgIter(iter) {
  const sep = iter.indexOf(":");
  if (sep < 0) {
    console.error(
      `SyntaxError: --iter format must be in "abc:xyz" format, no ":" found.`
    );
    process.exit(1);
  }
  return {
    counter: iter.substring(0, sep),
    iterable: iter.substring(sep + 1),
  };
}

program
  .version(require("../package.json").version)
  .arguments("<notebook> [cells...]")
  .description("Pre-render an Observable notebook.")
  .option("--redefine <cell:value...>", "Redefine a cell (string only)")
  .option(
    "--redefine-file <cell:<string,json,ndjson,csv>:value...>",
    "Redefine a cell with a file"
  )
  .requiredOption(
    "--iter <cell:cellIterator>",
    "The cell you want to iterate on, followed by the cell that contains the values that will be iterated through."
  )
  .option(
    "--iter-waitfor <cells...>",
    'What cell to "wait for" to be fulfilled when iterating through the iterator.'
  )
  .option(
    "--iter-index",
    "Whether to use the actual values of the iteratorCell or the indicies."
  )
  .option("-f, --format <format>", "Type of output, png, jpeg, or svg", "png")
  .option(
    "--out-dir <directory>",
    "Specify a directory to save all the frames to.",
    process.cwd()
  )
  .option(
    "--token <token>",
    "An observablehq.com API token to access the notebook."
  )
  .option(
    "--no-headless",
    "Turn off headless mode on the Puppeteer browser, meaning open the browser to the user."
  )
  .option(
    "-w, --width <value>",
    `Width of the Puppeteer browser. Default ${DEFAULT_WIDTH}`
  )
  .option(
    "-h, --height <value>",
    `Height of th Puppeteer browser. Default ${DEFAULT_HEIGHT}`
  )
  .option("-q, --quiet", "Don't print out logs")
  .action(function (argNotebook, argCells) {
    const opts = program.opts();
    const {
      version,
      redefine = [],
      redefineFile = [],
      fileAttachments = [],
      format,
      iter,
      iterWaitfor = [],
      outDir,
      token,
      width,
      height,
      headless,
    } = opts;
    let { width, height, format } = opts;

    if (width) width = +width;
    if (height) height = +height;

    const iterIndex = Boolean(opts.iterIndex);
    const argIter = parseArgIter(iter);

    const redefines = parseArgRedefines(redefine);
    const redefineFiles = parseArgRedefineFiles(redefineFile);
    const redefineFileAttachments = parseArgRedefines(fileAttachments);

    const embedCells = [...argCells, ...iterWaitfor];

    const config = {
      width,
      height,
      headless,
    };
    if (token) config["OBSERVABLEHQ_API_KEY"] = token;

    if (!quiet)
      console.log(`Loading notebook "${argNotebook}" with cells `, argCells);

    load(argNotebook, embedCells, config).then(async (notebook) => {
      for (const { cell, value } of redefines) {
        if (!quiet) console.log("Redefining ", cell, "with format ", format);
        await notebook.redefine(cell, value);
      }

      for await (const {
        cell,
        value,
        format: redefineFileFormat,
      } of redefineFiles) {
        if (!quiet)
          console.log(
            "Redefining ",
            cell,
            " with file ",
            value,
            " with format ",
            redefineFileFormat
          );
        const data = await valueOfFile(value, redefineFileFormat);
        notebook.redefine(cell, data);
      }

      if (redefineFileAttachments.length > 0) {
        const files = {};
        for (const { cell, value } of redefineFileAttachments) {
          if (!quiet)
            console.log(
              "Replacing FileAttachment ",
              cell,
              " with file ",
              value
            );
          files[cell] = isAbsolute(value) ? value : join(process.cwd(), value);
        }

        await notebook.fileAttachments(files);
      }

      // iterate through the cell
      const iterableValues = await notebook.value(argIter.iterable);

      const zeroPad = Array.from({
        length: Math.ceil(Math.log(iterableValues.length) / Math.log(10)),
      })
        .map(() => "0")
        .join("");

      for await (const [i, iterableValue] of iterableValues.entries()) {
        if (!quiet)
          console.log(`[${i + 1}/${iterableValues.length}] Redefining`);

        if (iterIndex) await notebook.redefine(argIter.counter, i);
        else await notebook.redefine(argIter.counter, iterableValue);

        if (!quiet)
          console.log(
            `[${i + 1}/${iterableValues.length}] Waiting for`,
            iterWaitfor
          );
        await Promise.all(iterWaitfor.map((cell) => notebook.waitFor(cell)));

        await Promise.all(
          argCells.map((cell) => {
            if (!quiet)
              console.log(
                `[${i + 1}/${iterableValues.length}] Screenshotting`,
                cell
              );
            const path = join(
              outDir,
              `${(zeroPad + i).slice(-zeroPad.length)}_${cell}.${format}`
            );
            if (format === "svg") return notebook.svg(cell, path);
            return notebook.screenshot(cell, path, { type: format });
          })
        );
      }

      notebook.browser.close();
    });
  });

program.parse(process.argv);
